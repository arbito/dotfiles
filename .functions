# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
  local arg=-sbh
  else
  local arg=-sh
  fi
  if [[ -n "$@" ]]; then
  du $arg -- "$@"
  else
  du $arg .[^.]* *
  fi
}

if [ -f ~/.git-completion.bash ]; then
    . ~/.git-completion.bash
fi

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
# Reference to:
# https://github.com/mathiasbynens/dotfiles/blob/master/.functions
function tre() {
  tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

# Current Git branch name in command prompt. Also set the color to PS1
# Reference:
# http://martinvalasek.com/blog/current-git-branch-name-in-command-prompt
#
function parse_git_branch () {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}
RED="\[\033[0;31m\]"
YELLOW="\[\033[0;33m\]"
GREEN="\[\033[0;32m\]"
NO_COLOR="\[\033[0m\]"

PS1="$GREEN\u@\h:$NO_COLOR\w$YELLOW\$(parse_git_branch)$NO_COLOR\$ "

function pgrep () {
  ps aux | grep  
}

# function to execute built-in cd
fasd_cd() {
  if [ $# -le 1 ]; then
    fasd "$@"
  else
    local _fasd_ret="$(fasd -e echo "$@")"
    [ -z "$_fasd_ret" ] && return
    [ -d "$_fasd_ret" ] && cd "$_fasd_ret" || echo "$_fasd_ret"
  fi
}
